const handler = async (m, { conn, participants, groupMetadata }) => {
  try {
    // Intentamos obtener la imagen del grupo
    const pp = await conn.profilePictureUrl(m.chat, 'image').catch(() => null) || `${global.icons}`;

    // Obtenemos configuraci√≥n del grupo desde la DB
    const { 
      antiToxic, reaction, antiTraba, antidelete, antiviewonce, 
      welcome, detect, antiLink, antiLink2, modohorny, 
      autosticker, audios 
    } = global.db.data.chats[m.chat];

    // Obtenemos lista de administradores
    const groupAdmins = participants.filter((p) => p.admin);
    const listAdmin = groupAdmins
      .map((v, i) => `${i + 1}. @${v.id.split('@')[0]}`)
      .join('\n') || '*No hay administradores*';

    // Identificamos al due√±o del grupo
    const owner = groupMetadata.owner || 
      groupAdmins.find((p) => p.admin === 'superadmin')?.id || 
      m.chat.split`-`[0] + '@s.whatsapp.net';

    // Texto del mensaje
    const text = `üí• *INFO GRUPO*
üíå *ID:*
‚Üí ${groupMetadata.id}
ü•∑ *Nombre:*
‚Üí ${groupMetadata.subject}
üåü *Descripci√≥n:*
‚Üí ${groupMetadata.desc?.toString() || 'Sin Descripci√≥n'}
üí´ *Miembros:*
‚Üí ${participants.length} Participantes
üëë *Creador del Grupo:*
‚Üí @${owner.split('@')[0]}
üèÜ *Administradores:*
${listAdmin}

üí≠ *CONFIGURACI√ìN*

‚óà *Welcome:* ${welcome ? '‚úÖ' : '‚ùå'}
‚óà *Detect:* ${detect ? '‚úÖ' : '‚ùå'}  
‚óà *Antilink:* ${antiLink ? '‚úÖ' : '‚ùå'} 
‚óà *Antilink ùü∏:* ${antiLink2 ? '‚úÖ' : '‚ùå'} 
‚óà *Modohorny:* ${modohorny ? '‚úÖ' : '‚ùå'} 
‚óà *Autosticker:* ${autosticker ? '‚úÖ' : '‚ùå'} 
‚óà *Audios:* ${audios ? '‚úÖ' : '‚ùå'} 
‚óà *Antiver:* ${antiviewonce ? '‚úÖ' : '‚ùå'} 
‚óà *Reacci√≥n:* ${reaction ? '‚úÖ' : '‚ùå'}
‚óà *Delete:* ${antidelete ? '‚úÖ' : '‚ùå'} 
‚óà *Antitoxic:* ${antiToxic ? '‚úÖ' : '‚ùå'} 
‚óà *Antitraba:* ${antiTraba ? '‚úÖ' : '‚ùå'} 
`.trim();

    // Enviar mensaje con imagen
    await conn.sendMessage(m.chat, {
      image: { url: pp },
      caption: text,
      mentions: [...groupAdmins.map((v) => v.id), owner]
    }, { quoted: m });

  } catch (e) {
    console.error('Error en el comando infogrupo:', e);
    await conn.reply(m.chat, '‚ùå Error al obtener la informaci√≥n del grupo.', m);
  }
};

handler.help = ['infogrupo'];
handler.tags = ['grupo'];
handler.command = ['infogrupo', 'gp'];
handler.register = true;
handler.group = true;

export default handler;